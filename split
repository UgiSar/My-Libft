#include "libft.h"
#include <stdlib.h>

static size_t count_words_helper(const char *s, char c, size_t count)
{
    if (*s == '\0')
        return count;
    
    // Skip leading delimiter characters
    while (*s == c)
        s++;

    if (*s == '\0')
        return count;

    // Count the current word
    count++;

    // Find the end of the current word
    while (*s != '\0' && *s != c)
        s++;

    return count_words_helper(s, c, count);
}

static size_t count_words(const char *s, char c)
{
    return count_words_helper(s, c, 0);
}

static char *get_next_word(const char *s, char c)
{
    // Find the first character that is not the delimiter
    while (*s == c)
        s++;

    if (*s == '\0')
        return NULL;

    // Find the end of the current word
    const char *end = s;
    while (*end != '\0' && *end != c)
        end++;

    // Calculate the length of the word
    size_t len = end - s;

    // Allocate memory for the word
    char *word = (char *)malloc(len + 1);
    if (word == NULL)
        return NULL;

    // Copy the characters to the word
    for (size_t i = 0; i < len; i++)
        word[i] = s[i];

    word[len] = '\0'; // Null-terminate the word

    return word;
}

static void free_array(char **array, size_t count)
{
    for (size_t i = 0; i < count; i++)
    {
        free(array[i]);
    }
    free(array);
}

char **ft_split(const char *s, char c)
{
    if (s == NULL)
        return NULL;

    size_t words = count_words(s, c);

    // Allocate memory for the array of strings
    char **array = (char **)malloc(sizeof(char *) * (words + 1));

    if (array == NULL)
        return NULL;

    size_t i = 0;
    while (i < words)
    {
        // Get the next word
        char *word = get_next_word(s, c);

        if (word == NULL)
        {
            // Free previously allocated words and the array
            free_array(array, i);
            return NULL;
        }

        array[i] = word;
        i++;
        s += strlen(word) + 1; // Move s to the next word
    }

    array[i] = NULL;

    return array;
}
